# -*- coding: utf-8 -*-
"""univariate_autosklearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/microprediction/automl-notebooks/blob/main/univariate_autosklearn.ipynb
"""

from schooled.generating.step_2_collate import load_massaged
import pandas as pd 
import numpy as np 
from pprint import pprint
import sklearn.metrics
import autosklearn.regression
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
import numpy as np
from pprint import pprint

"""# Data to fit """

url = 'https://github.com/microprediction/schooled/blob/main/localoutput/sarima/output/massaged.csv?raw=true'
df = pd.read_csv(url)
df.rename(inplace=True,columns={'y_next':'x'})

x_cols = [ c for c in df.columns if 'y_' in c ]
assert 'x' not in x_cols 
y = df['wiggly'].values   # <--- Model we want surrogate for
X = df[x_cols].values
z = df['x'].values        # <--- The target (next value in the series)
y1 = 0.9*y + 0.1*z        # <--- Train on combination of model and target, maybe

X = X.astype(np.float32)
n_test = 5000
n_train = len(df)-2*n_test
X_train, y_train, z_train = X[:n_train], y1[:n_train], z[:n_train]
X_test, y_test, z_test = X[n_train:(n_train+n_test)], y1[n_train:(n_train+n_test)], z[n_train:(n_train+n_test)]
X_val, y_val, z_val = X[(n_train+n_test):], y1[(n_train+n_test):], z[(n_train+n_test):]

automl = autosklearn.regression.AutoSklearnRegressor(
    time_left_for_this_task=120,
    per_run_time_limit=30,
    tmp_folder="./tmp",
)
automl.fit(X_train, y_train, dataset_name="sarima")

print(automl.leaderboard())

y_train_hat = automl.predict(X_train)
y_test_hat = automl.predict(X_test)
y_val_hat = automl.predict(X_val)

print("Train surrogate R2 score:", sklearn.metrics.r2_score(y_train, y_train_hat))
print("Test surrogate R2 score:", sklearn.metrics.r2_score(y_test, y_test_hat))
print("Test surrogate R2 score:", sklearn.metrics.r2_score(y_val, y_val_hat))
print("Train surrogate MSE score:", sklearn.metrics.mean_squared_error(y_train, y_train_hat))
print("Test surrogate MSE score:", sklearn.metrics.mean_squared_error(y_test, y_test_hat))
print("Val surrogate MSE score:", sklearn.metrics.mean_squared_error(y_val, y_val_hat))

print("Val model error:", sklearn.metrics.mean_squared_error(y_val, z_val))
print('Val MSE relative to last value:',sklearn.metrics.mean_squared_error(y_val, y_val_hat)/sklearn.metrics.mean_squared_error(y_val, np.zeros_like(y_val)))
# How does surrogate error compare to original?
print('Val surrogate prediction error relative to model:',sklearn.metrics.mean_squared_error(z_val, y_val_hat)/sklearn.metrics.mean_squared_error(z_val, y_val))
